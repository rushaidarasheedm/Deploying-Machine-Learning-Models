# Deploying Machine Learning Models Using Flask & XML Configuration

## Introduction
Machine learning models need to be deployed efficiently to serve real-time predictions. Flask, a lightweight web framework for Python, provides an easy way to turn ML models into RESTful APIs. XML can be used for configuration management, ensuring flexibility in defining API endpoints, model paths, and runtime parameters.

This guide walks through the process of:
1. Setting up a Flask API for an ML model
2. Using XML to configure model parameters
3. Deploying the API for real-world usage

---

## 1. Setting Up the Environment
Before proceeding, ensure you have the required dependencies installed:

```sh
pip install flask pandas numpy scikit-learn
2. Training a Simple Machine Learning Model
We'll train a simple model using Scikit-learn and save it for later use.

python
Copy
Edit
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import joblib

# Generate sample data
data = pd.DataFrame({
    'X': np.arange(1, 101),
    'Y': np.arange(1, 101) * 2 + np.random.randn(100) * 5
})

# Train model
X = data[['X']]
y = data['Y']
model = LinearRegression()
model.fit(X, y)

# Save the trained model
joblib.dump(model, 'model.pkl')
print("Model saved successfully.")
3. Defining XML Configuration for Deployment
Instead of hardcoding model paths or API settings, we use XML for configuration.

Example config.xml File:
xml
Copy
Edit
<Configuration>
    <Model>
        <Path>model.pkl</Path>
        <InputFeature>X</InputFeature>
    </Model>
    <API>
        <Host>0.0.0.0</Host>
        <Port>5000</Port>
    </API>
</Configuration>
This configuration allows easy updates without modifying the code.

4. Creating the Flask API
We now build a RESTful API using Flask that:

Loads the model from the XML-defined path
Accepts input data
Returns predictions
Flask Application (app.py)
python
Copy
Edit
from flask import Flask, request, jsonify
import joblib
import xml.etree.ElementTree as ET
import numpy as np

# Parse XML Configuration
config_tree = ET.parse('config.xml')
config_root = config_tree.getroot()

model_path = config_root.find('Model/Path').text
input_feature = config_root.find('Model/InputFeature').text
host = config_root.find('API/Host').text
port = int(config_root.find('API/Port').text)

# Load Model
model = joblib.load(model_path)

app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        input_value = np.array([[data[input_feature]]])
        prediction = model.predict(input_value)[0]
        return jsonify({'prediction': prediction})
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(host=host, port=port)
5. Running the API
Start the Flask server using:

sh
Copy
Edit
python app.py
It will run on http://0.0.0.0:5000.

6. Testing the API
Sending a Request via curl
sh
Copy
Edit
curl -X POST http://0.0.0.0:5000/predict -H "Content-Type: application/json" -d '{"X": 10}'
Expected JSON Response:
json
Copy
Edit
{"prediction": 20.5}
7. Deploying the API
You can deploy this Flask API using:

Docker: Create a Docker container
Cloud Platforms: AWS, GCP, Azure App Services
NGINX + Gunicorn: Serve API in production
Dockerfile for Deployment
dockerfile
Copy
Edit
FROM python:3.8
WORKDIR /app
COPY . /app
RUN pip install -r requirements.txt
CMD ["python", "app.py"]
Build and run:

sh
Copy
Edit
docker build -t flask-ml-api .
docker run -p 5000:5000 flask-ml-api
Conclusion
This guide demonstrated how to deploy a machine learning model using Flask while managing configurations with XML. The approach improves flexibility, making it easy to modify settings without changing the core application code.

Repository Structure (GitHub)
If you're uploading this project to GitHub, structure your repository like this:

arduino
Copy
Edit
ðŸ“‚ flask-ml-deployment
 â”£ ðŸ“œ app.py
 â”£ ðŸ“œ model.pkl
 â”£ ðŸ“œ config.xml
 â”£ ðŸ“œ requirements.txt
 â”£ ðŸ“œ Dockerfile
 â”— ðŸ“œ README.md
Example requirements.txt File
txt
Copy
Edit
flask
numpy
pandas
scikit-learn
joblib
This ensures anyone cloning your repository can quickly install dependencies and run the project.

Next Steps
Integrate authentication (e.g., API keys)
Add logging and monitoring
Deploy to a cloud service
Contributors
Your Name Rushaida Rasheed M
